<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="DEBUG">

	<Properties>
		<Property name="logFileName">api</Property>
		<Property name="consoleLayout">%style{%d{ISO8601}}{black} %highlight{%-5level }[%style{%t}{bright,blue}] %style{%C{1.}}{bright,yellow}: %msg%n%throwable</Property>
		<Property name="fileLayout">%d [%t] %-5level %c(%M:%L) - %m%n</Property>
	</Properties>

	<Appenders>
		<Console name="console" target="SYSTEM_OUT">
			<PatternLayout pattern="${consoleLayout}" />
		</Console>
		<RollingFile name="file" fileName="logs/${logFileName}.log"
					 filePattern="logs/$${date:yyyyMM}/${logFileName}.%d{yyyyMMdd}.log">
			<PatternLayout pattern="${fileLayout}" />
			<Policies>
				<TimeBasedTriggeringPolicy interval="1" modulate="true"/>
			</Policies>
		</RollingFile>
	</Appenders>

	<Loggers>
		<!-- 스프링 프레임워크에서 찍는건 level을 info로 설정 -->
		<Logger name="org.springframework" level="DEBUG" additivity="false" >
			<AppenderRef ref="console" />
			<AppenderRef ref="file" />
		</Logger>
		<Logger name="org" level="DEBUG" additivity="false" >
			<AppenderRef ref="console" />
			<AppenderRef ref="file" />
		</Logger>

		<!-- rolling file에는 debug, console에는 info 분리하여 처리 가능하다. -->
		<Logger name="com.tata" level="DEBUG" additivity="false" >
			<AppenderRef ref="console" />
			<AppenderRef ref="file" />
		</Logger>

		<!-- log4jdbc 옵션 설정 -->
		<Logger name="jdbc" level="OFF"/>

		<!-- 커넥션 open close 이벤트를 로그로 남긴다. -->
		<Logger name="jdbc.connection" level="OFF"/>

		<!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. -->
		<Logger name="jdbc.sqlonly" level="DEBUG" additivity="false">
			<AppenderRef ref="console" />
			<AppenderRef ref="file" />
		</Logger>

		<!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. -->
		<Logger name="jdbc.sqltiming" level="DEBUG" additivity="false">
			<AppenderRef ref="console" />
			<AppenderRef ref="file" />
		</Logger>

		<!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. -->
		<Logger name="jdbc.audit" level="OFF"/>

		<!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. -->
		<Logger name="jdbc.resultset" level="OFF"/>

		<!-- SQL 결과 조회된 데이터의 table을 로그로 남긴다. -->
		<Logger name="jdbc.resultsettable" level="OFF"/>

		<Logger name="com.zaxxer.hikari" level="debug" additivity="false">
			<AppenderRef ref="console" />
			<AppenderRef ref="file" />
		</Logger>

		<!-- AWS EC2 안에서 사용되지 않으면 warn 으로 service endpoint 관련 exception 이 발생 하기 때문에 local에서 실행되는 경우 제외 -->
		<Logger name="com.amazonaws.util.EC2MetadataUtils" level="error"/>

		<Root level="DEBUG" additivity="false">
			<AppenderRef ref="console"/>
			<AppenderRef ref="file"/>
		</Root>
	</Loggers>
</Configuration>
